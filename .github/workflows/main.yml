name: Build and Release

on:
  push:
    branches:
      - main  # Trigger action on push to main branch

permissions:
  contents: write  # This grants write permissions to the token

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 'lts/*'

    - name: Install dependencies
      run: npm i

    - name: Build the project
      run: npm run build

    - name: Zip dist folder
      run: zip -r gulp-jmkcoder-msbuild.zip dist

    - name: Get the latest tag
      id: get_tag
      run: echo "latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)" >> $GITHUB_ENV

    - name: Increment version tag
      id: increment_tag
      run: |
        latest_tag=${{ env.latest_tag }}
        if [ -z "$latest_tag" ]; then
          echo "new_tag=v1.0.0" >> $GITHUB_ENV
        else
          # Assuming versioning follows semantic versioning: v1.0.0, v1.0.1, etc.
          new_tag=v$(echo $latest_tag | awk -F'[.]' '{print $1 "." $2 "." $3+1}')
          echo "new_tag=$new_tag" >> $GITHUB_ENV
        fi

    - name: Configure Git User
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Create new tag
      run: |
        git tag ${{ env.new_tag }}
        git push origin ${{ env.new_tag }}

    - name: Create GitHub Release
      id: create_release  # Add an ID to reference the outputs
      uses: actions/create-release@v1
      with:
        tag_name: ${{ env.new_tag }}
        release_name: ${{ env.new_tag }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./gulp-jmkcoder-msbuild.zip
        asset_name: gulp-jmkcoder-msbuild.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
