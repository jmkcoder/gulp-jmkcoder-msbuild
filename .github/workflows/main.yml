name: Build and Release

on:
  push:
    branches:
      - main  # Trigger action on push to main branch

permissions:
  contents: write  # This grants write permissions to the token

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_tag.outputs.latest_tag }}  # Pass the tag to the rollback job

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 'lts/*'

    - name: Install dependencies
      run: npm i

    - name: Build the project
      run: npm run build

    - name: Debug dist folder
      run: ls -la dist

    - name: Zip dist folder
      run: zip -r gulp-jmkcoder-msbuild.zip dist

    - name: Get the latest tag
      id: get_tag
      run: echo "latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)" >> $GITHUB_ENV
      # Pass the tag to the rollback job
      outputs:
        latest_tag: ${{ steps.get_tag.outputs.latest_tag }}

    - name: Increment version tag
      id: increment_tag
      run: |
        latest_tag=${{ env.latest_tag }}
        if [ -z "$latest_tag" ]; then
          echo "new_tag=v1.0.0" >> $GITHUB_ENV
        else
          # Assuming versioning follows semantic versioning: v1.0.0, v1.0.1, etc.
          new_tag=v$(echo $latest_tag | awk -F'[.]' '{print $1 "." $2 "." $3+1}')
          while git rev-parse "refs/tags/$new_tag" >/dev/null 2>&1; do
            new_tag=v$(echo $new_tag | awk -F'[.]' '{print $1 "." $2 "." $3+1}')
          done
          echo "new_tag=$new_tag" >> $GITHUB_ENV
        fi

    - name: Configure Git User
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Create new tag
      run: |
        git tag ${{ env.new_tag }}
        git push origin ${{ env.new_tag }}

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ env.new_tag }}
        release_name: ${{ env.new_tag }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./gulp-jmkcoder-msbuild.zip
        asset_name: gulp-jmkcoder-msbuild.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up .npmrc
      run: |
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_PUBLISH_KEY }}" > ~/.npmrc
        echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
    
    - name: Debug temp_package
      run: |
        mkdir temp_package
        ls -la dist
        cp -r dist/. temp_package/   # Copy all contents of dist, including hidden files
        cp package.json temp_package/
        cp README.md temp_package/
        cp LICENSE temp_package/
        ls -la temp_package  # List files in temp_package to verify
        cd temp_package
        npm pack  # Create a tarball from the contents

    - name: Publish to NPM
      run: |
        cd temp_package
        npm publish --access public  # Publish with public access
      continue-on-error: true  # Continue even if this step fails

  rollback:
    runs-on: ubuntu-latest
    needs: build
    if: failure()  # Only run if the build job fails

    steps:
    - name: Configure Git User
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Delete Git Tag
      run: |
        git tag -d ${{ needs.build.outputs.tag }}
        git push origin :refs/tags/${{ needs.build.outputs.tag }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete GitHub Release
      run: |
        release_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                          -H "Accept: application/vnd.github.v3+json" \
                          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ needs.build.outputs.tag }}" \
                          | jq -r '.id')
        curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                        -H "Accept: application/vnd.github.v3+json" \
                        "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
