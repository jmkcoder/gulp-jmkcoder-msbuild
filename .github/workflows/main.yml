name: Build and Release

on:
  push:
    branches:
      - main  # Trigger action on push to main branch

permissions:
  contents: write  # This grants write permissions to the token

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 'lts/*'

    - name: Install dependencies
      run: npm i

    - name: Build the project
      run: npm run build

    - name: Debug dist folder
      run: ls -la dist

    - name: Zip dist folder
      run: zip -r gulp-jmkcoder-msbuild.zip dist

    - name: Get the latest tag
      id: get_tag
      run: |
        latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=$latest_tag" >> $GITHUB_ENV

    - name: Determine version increment
      id: determine_increment
      run: |
        pr_title="${{ github.event.pull_request.title }}"
        latest_tag=${{ env.latest_tag }}

        # Extract major, minor, and patch components from the latest tag
        major=$(echo $latest_tag | cut -d. -f1 | sed 's/v//')
        minor=$(echo $latest_tag | cut -d. -f2)
        patch=$(echo $latest_tag | cut -d. -f3)

        # Determine the increment type based on PR title
        if [[ "$pr_title" == "[Major]"* ]]; then
          major=$((major + 1))
          minor=0
          patch=0
        elif [[ "$pr_title" == "[Minor]"* ]]; then
          minor=$((minor + 1))
          patch=0
        elif [[ "$pr_title" == "[Patch]"* ]]; then
          patch=$((patch + 1))
        else
          echo "PR title must start with [Major], [Minor], or [Patch]."
          exit 1
        fi

        # Construct the new tag
        new_tag="v${major}.${minor}.${patch}"
        echo "new_tag=$new_tag" >> $GITHUB_ENV

    - name: Configure Git User
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Create new tag
      id: create_tag
      run: |
        git tag ${{ env.new_tag }}
        git push origin ${{ env.new_tag }}

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ env.new_tag }}
        release_name: ${{ env.new_tag }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./gulp-jmkcoder-msbuild.zip
        asset_name: gulp-jmkcoder-msbuild.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up .npmrc
      run: |
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_PUBLISH_KEY }}" > ~/.npmrc
        echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
    
    - name: Debug temp_package
      run: |
        mkdir temp_package
        ls -la dist
        cp -r dist/. temp_package/   # Copy all contents of dist, including hidden files
        cp package.json temp_package/
        cp README.md temp_package/
        cp LICENSE temp_package/
        ls -la temp_package  # List files in temp_package to verify
        cd temp_package
        npm pack  # Create a tarball from the contents

    - name: Publish to NPM
      id: publish_npm
      run: |
        cd temp_package
        npm publish --access public  # Publish with public access
      continue-on-error: true  # Continue even if this step fails

    - name: Upload tag as artifact
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: failed-tag
        path: <(echo ${{ env.new_tag }})
      
  rollback:
    runs-on: ubuntu-latest
    needs: build
    if: failure()  # Only run if the build job fails

    steps:
    - name: Download tag artifact
      uses: actions/download-artifact@v3
      with:
        name: failed-tag

    - name: Configure Git User
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Delete Git Tag
      run: |
        tag=$(cat failed-tag)
        git tag -d $tag
        git push origin :refs/tags/$tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete GitHub Release
      run: |
        tag=$(cat failed-tag)
        release_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                          -H "Accept: application/vnd.github.v3+json" \
                          "https://api.github.com/repos/${{ github.repository }}/releases/tags/$tag" \
                          | jq -r '.id')
        curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                        -H "Accept: application/vnd.github.v3+json" \
                        "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete NPM Package
      run: |
        tag=$(cat failed-tag)
        npm deprecate $tag "Deprecation reason" || echo "Package not found"
      env:
        NPM_TOKEN: ${{ secrets.NPM_PUBLISH_KEY }}
